package.name = "asterinas"

# Execution Sequence
[tag.PostToFunc]
args = [ "func" ]
desc = "This function should be executed after {func}."

[tag.NotPostToFunc]
args = [ "func" ]
desc = "This function should not be executed after {func}."

[tag.NotPriorToFunc]
args = [ "func" ]
desc = "This function should not be executed before {func}."

[tag.ValDerived]
args = [ "val", "func" ]
desc = "{val} should be validly derived from {func}."

[tag.CallOnce]
args = [ "scope" ] #scope âˆˆ {system, core}
desc = "This function should be called only once per {scope}."

[tag.Context]
args = [ "after", "before" ]
desc = "This function should be executed after {after} before {before}."

[tag.ContextVal]
args = [ "val", "context" ]
desc = "{val} should be {context} in the execution."

#Value
[tag.Eq]
args = [ "lhs", "rhs"]
desc = "{lhs} should equal to {rhs}."

#Valid
[tag.Valid]
args = [ "val" ]
desc = "{val} should be valid."

[tag.ValidBy]
args = [ "val", "cond" ]
desc = "{val} should be valid by {cond}."

[tag.ValidFor]
args = [ "val", "doing" ]
desc = "{val} should be valid for {doing}."

[tag.ValidAs]
args = [ "val", "something" ]
desc = "{val} should be valid as {something}."

[tag.Safe]
args = [ "val" ]
desc = "{val} should be safe."

#Reference
[tag.MutExclusive]
args = [ "action", "val" ]
types = [ "hazard" ]
desc = "{action} should have exclusive mutable access to {val}."

[tag.RefHeld]
args = [ "val" ]
desc = "The caller must have already held a reference to {val}."

[tag.RefUnheld]
args = [ "val" ]
desc = "The caller must not have already held a reference to {val}."

[tag.RefForgotten]
args = [ "val" ]
desc = "{val} must be forgotten by [`core::mem::forget`], [`ManuallyDrop`], or [`into_raw`]."

[tag.Sync]
args = [ "val" ]
types = [ "hazard" ]
desc = "If the type of {val} is not [`Sync`], the caller must ensure that {val} is not accessed concurrently."

#Misc
[tag.Untracked]
args = [ "val" ]
desc = "{val} should be untracked."

[tag.UserSpace]
args = [ "start", "end" ]
desc = "{start}..{end} should be within user space."

[tag.KernelMemorySafe]
args = [ "val" ]
desc = "{val} does not affect kernel's memory safety."

[tag.Unaltered]
args = [ "val" ]
types = [ "hazard" ]
desc = "{val} should not be altered."

[tag.Unaccessed]
args = [ "val" ]
desc = "{val} should bot be accessed."

[tag.Bounded]
args = [ "val", "bound" ]
desc = "{val} should be bounded by {bound}."

[tag.LockHeld]
args = [ "val" ]
desc = "{val} should have already held the lock."

[tag.Section]
args = [ "val", "section" ]
types = [ "hazard" ]
dsec = "{val} should reside in {section}."

[tag.ReferTo]
args = [ "func" ]
desc = "This function should meet the safety requirement of {func}."

[tag.Memo]
args = [ "desc" ]
desc = "{desc}"